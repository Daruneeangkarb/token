pragma solidity ^0.4.24;

// ----------------------------------------------------------------------------
// Sample token contract
//
/*{{ใส่ชื่อเหรียญ}}*/
// Symbol        : {{XRP}} 
/*{{ใส่ชื่อเหรียญ Token}}*/
// Name          : {{XRP Token}}
 /*{{ใส่จำนวนเหรียญตามต้องการ }}*/
// Total supply  : {{1000000}} 
/*{{ใส่ตำแหน่งทศนิยมตามต้องการเหรียญ }}*/
// Decimals      : {{4}}  
/*{{ใส่หมายเลขบัญชี (กระเป๋า meta mash bitkub }}*/
// Owner Account : {{0x644a61Bfa9951eE69eb5018eD52427989CE4c1B5}}

// Enjoy.
//
// (c) by Juan Cruz Martinez 2020. MIT Licence.
// ----------------------------------------------------------------------------


// ----------------------------------------------------------------------------
// Lib: Safe Math
// ----------------------------------------------------------------------------
/* ความปลอดภัยคณิตศาสตร์ */
contract SafeMath {

    function safeAdd(uint a, uint b) public pure returns (uint c) {
        c = a + b;
        require(c >= a);
    }

    function safeSub(uint a, uint b) public pure returns (uint c) {
        require(b <= a);
        c = a - b;
    }

    function safeMul(uint a, uint b) public pure returns (uint c) {
        c = a * b;
        require(a == 0 || c / a == b);
    }

    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
}


/**
ERC Token Standard #20 Interface
https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md
*/
contract ERC20Interface {
    function totalSupply() public constant returns (uint);
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    function transfer(address to, uint tokens) public returns (bool success);
    function approve(address spender, uint tokens) public returns (bool success);
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
}
/*
สัญญา ERC20Interface { ฟังก์ชัน totalSupply ()สาธารณะดูผลตอบแทน (uint); 
ฟังก์ชัน balanceOf (address tokenOwner)สาธารณะดูผลตอบแทน (ยอดคงเหลือ uint);
ค่าเผื่อฟังก์ชัน(address tokenOwner, address spender)สาธารณะดูผลตอบแทน (uint ที่เหลือ); 
การถ่ายโอนฟังก์ชัน (ที่อยู่ไปยังโทเค็น uint) สาธารณะผลตอบแทน (ความสำเร็จบูล); 
ฟังก์ชั่นอนุมัติ (ผู้ใช้ที่อยู่โทเค็น uint) สาธารณะผลตอบแทน (ความสำเร็จบูล); 
ฟังก์ชั่นการถ่ายโอนจาก(ที่อยู่จากที่อยู่ไปยังโทเค็น uint) สาธารณะผลตอบแทน (ความสำเร็จบูล); 
การถ่ายโอนเหตุการณ์ (ที่อยู่ที่จัดทำดัชนีจากที่อยู่ที่ทำดัชนีไปยังโทเค็น uint); 
การอนุมัติเหตุการณ์ (ที่อยู่ที่จัดทำดัชนี tokenOwner, ที่อยู่ผู้ใช้จ่ายที่จัดทำดัชนี, โทเค็น uint); }
*/

/**
Contract function to receive approval and execute function in one call
Borrowed from MiniMeToken
*/
contract ApproveAndCallFallBack {
    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;
}

/**
ERC20 Token, with the addition of symbol, name and decimals and assisted token transfers
*/
contract XRPToken is ERC20Interface, SafeMath {
    string public symbol;
    string public  name;
    uint8 public decimals;
    uint public _totalSupply;

    mapping(address => uint) balances;
    mapping(address => mapping(address => uint)) allowed;
/*
XRPToken สัญญาคือ ERC20Interface, SafeMath { 
    สัญลักษณ์สาธารณะสตริง; 
    สตริงสาธารณะชื่อ; 
 uint8 ทศนิยมสาธารณะ;
 uint สาธารณะ _totalSupply; 
 การทำแผนที่ (ที่อยู่ => uint) ยอดคงเหลือ; 
การทำแผนที่ (ที่อยู่ => การทำแผนที่ (ที่อยู่ => uint)) อนุญาต;
*/

    // ------------------------------------------------------------------------
    // Constructor
    // ------------------------------------------------------------------------
    constructor() public {
        symbol = "XRP"; /*{{ใส่ชื่อเหรียญ}}*/
        name = "XRP Token";  /*{{ใส่ชื่อเหรียญ Token}}*/
        decimals = 4;  /*{{ใส่ตำแหน่งทศนิยมตามต้องการเหรียญ }}*/
        _totalSupply = 1000000; /*{{ใส่จำนวนเหรียญตามต้องการ }}*/
        balances[0x644a61Bfa9951eE69eb5018eD52427989CE4c1B5] = _totalSupply;
        emit Transfer(address(0), 0x644a61Bfa9951eE69eb5018eD52427989CE4c1B5, _totalSupply);
    }/*{{ใส่หมายเลขบัญชี (กระเป๋า meta mash bitkub }}โอนย้ายจากที่หนึ่งไปยังที่หนึ่ง*/


    // ------------------------------------------------------------------------
    // Total supply
    // ------------------------------------------------------------------------
    function totalSupply() public constant returns (uint) {
        return _totalSupply  - balances[address(0)];
    }
    /*
    ฟังก์ชัน totalSupply () ผลตอบแทนมุมมองสาธารณะ (uint) { 
    ส่งคืน _totalSupply – ยอดคงเหลือ [ที่อยู่ (0)]; }
    */

    // ------------------------------------------------------------------------
    // Get the token balance for account tokenOwner
    // ------------------------------------------------------------------------
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
        return balances[tokenOwner];
    }


    // ------------------------------------------------------------------------
    // Transfer the balance from token owner's account to to account
    // - Owner's account must have sufficient balance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transfer(address to, uint tokens) public returns (bool success) {
        balances[msg.sender] = safeSub(balances[msg.sender], tokens);
        balances[to] = safeAdd(balances[to], tokens);
        emit Transfer(msg.sender, to, tokens);
        return true;
    }
    /*
    การถ่ายโอนฟังก์ชัน (ที่อยู่ไปยังโทเค็น uint)สาธารณะผลตอบแทน (ความสำเร็จบูล){ 
        ยอดคงเหลือ [msg.sender] = safeSub (ยอดคงเหลือ [msg.sender], โทเค็น);
        ยอดคงเหลือ [ถึง] = safeAdd (ยอดคงเหลือ [ถึง], โทเค็น); 
        ปล่อยโอน (msg.sender, to, tokens); กลับจริง; }
    */


    // ------------------------------------------------------------------------
    // Token owner can approve for spender to transferFrom(...) tokens
    // from the token owner's account
    //
    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md
    // recommends that there are no checks for the approval double-spend attack
    // as this should be implemented in user interfaces 
    // ------------------------------------------------------------------------
    function approve(address spender, uint tokens) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        return true;
    }
    /*
    ฟังก์ชั่นอนุมัติ (ผู้ใช้ที่อยู่โทเค็น uint) ผลตอบแทนสาธารณะ (ความสำเร็จบูล) { 
        อนุญาต [msg.sender] [spender] = โทเค็น; 
        ปล่อยการอนุมัติ (msg.sender, spender, tokens); 
        กลับจริง; }
    
    */

    // ------------------------------------------------------------------------
    // Transfer tokens from the from account to the to account
    // 
    // The calling account must already have sufficient tokens approve(...)-d
    // for spending from the from account and
    // - From account must have sufficient balance to transfer
    // - Spender must have sufficient allowance to transfer
    // - 0 value transfers are allowed
    // ------------------------------------------------------------------------
    function transferFrom(address from, address to, uint tokens) public returns (bool success) {
        balances[from] = safeSub(balances[from], tokens);
        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);
        balances[to] = safeAdd(balances[to], tokens);
        emit Transfer(from, to, tokens);
        return true;
    }
    /*
    function transferFrom (address from, address to, uint tokens) public return (bool success) { 
        ยอดคงเหลือ [จาก] = safeSub (ยอดคงเหลือ [จาก], โทเค็น); 
        อนุญาต [จาก] [msg.sender] = safeSub (อนุญาต [จาก] [msg.sender], โทเค็น); 
        ยอดคงเหลือ [ถึง] = safeAdd (ยอดคงเหลือ [ถึง], โทเค็น);
        ส่งการโอน (จากถึงโทเค็น); 
        กลับจริง; }
    */

    // ------------------------------------------------------------------------
    // Returns the amount of tokens approved by the owner that can be
    // transferred to the spender's account
    // ------------------------------------------------------------------------
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {
        return allowed[tokenOwner][spender];
    }


    // ------------------------------------------------------------------------
    // Token owner can approve for spender to transferFrom(...) tokens
    // from the token owner's account. The spender contract function
    // receiveApproval(...) is then executed
    // ------------------------------------------------------------------------
    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);
        return true;
    }


    // ------------------------------------------------------------------------
    // Don't accept ETH
    // ------------------------------------------------------------------------
    function () public payable {
        revert();
    }
}
